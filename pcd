



Exp 1:
#include<stdio.h>
#include<ctype.h>
int isOperator(char ch){
return (ch=='+'||ch=='-'||ch=='*'||ch=='/'||ch=='%');
}
int main() {
char str[15];
scanf("%s",str);
for(int i = 0; str[i]; i++) {
if(isalpha(str[i]))
printf("%c is an identifier\n", str[i]);
else if(str[i]=='=')
printf("%c is an assignment operator\n", str[i]);
else if(isOperator(str[i]))
printf("%c is an arithmetic operator\n", str[i]);
else if(isdigit(str[i])){
int start = i;
while(isdigit(str[++i]));
printf("%.*s is a constant\n", i - start, &str[start]);}
else
printf("%c is a delimiter", str[i]);
}
return 0;
}
Exp2:
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define MAX_SYMBOLS 100
typedef struct {
char name[50];


int address;
} SymbolEntry;
SymbolEntry symbolTable[MAX_SYMBOLS];
int symbolCount = 0;
int currentAddress = 1000;
void insertSymbol(char *name) {
strcpy(symbolTable[symbolCount].name, name);
symbolTable[symbolCount].address = currentAddress;
currentAddress += 2;
symbolCount++;
}
int main() {
char code[] = "void main() { int a; float b; char c; print(\"hi\"); }";
char *token = strtok(code, " (){};");
while (token != NULL) {
if (strcmp(token, "void") == 0 || strcmp(token, "int") == 0 || strcmp(token, "float") == 0 ||
strcmp(token, "char") == 0)
printf("%s is a keyword\n", token);
else if (isalpha(token[0])) {
insertSymbol(token);
printf("%s is an identifier\n", token);
} else if (strcmp(token, ";") == 0 || strcmp(token, "{") == 0 || strcmp(token, "}") == 0)
printf("%s is a delimiter\n", token);
token = strtok(NULL, " (){};");
}
printf("\nSymbol Table:\nAddress\tIdentifier\n");
for (int i = 0; i < symbolCount; i++)
printf("%d\t%s\n", symbolTable[i].address, symbolTable[i].name);
return 0;
}
Exp 3:
#include<stdio.h>
#include<ctype.h>
#include<string.h>
int main()
{
int n,i,j;
scanf("%d",&n);
int a[n][n];


for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
scanf("%d",&a[i][j]);
}
}
for(i=0;i<n;i++)
{
printf("E-closure %d: %d",i,i);
for(j=0;j<n;j++)
{
if(a[i][j]==1)
{
printf(",%d",j);
}
}
printf("\n");
}
return 0;
}
Exp 4:
//exp4 simulation of nfa
#include <stdio.h>
#include <string.h>
int main()
{
char reg[20];
int q[20][3], i, j, len, a, b;
for (a = 0; a < 20; a++)
{
for (b = 0; b < 3; b++)
{
q[a][b] = 0;
}
}
printf("Regular expression: \n");
scanf("%s", reg);
len = strlen(reg);
i = 0;
j = 1;


while (i < len)
{
if (reg[i] == 'a' && reg[i + 1] != '/' && reg[i + 1] != '*')
{
q[j][0] = j + 1;
j++;
}
if (reg[i] == 'b' && reg[i + 1] != '/' && reg[i + 1] != '*')
{
q[j][1] = j + 1;
j++;
}
if (reg[i] == 'e' && reg[i + 1] != '/' && reg[i + 1] != '*')
{
q[j][2] = j + 1;
j++;
}
if (reg[i] == 'a' && reg[i + 1] == '/' && reg[i + 2] == 'b')
{
q[j][2] = ((j + 1) * 10) + (j + 3);
j++;
q[j][0] = j + 1;
j++;
q[j][2] = j + 3;
j++;
q[j][1] = j + 1;
j++;
q[j][2] = j + 1;
j++;
i = i + 2;
}
if (reg[i] == 'b' && reg[i + 1] == '/' && reg[i + 2] == 'a')
{
q[j][2] = ((j + 1) * 10) + (j + 3);
j++;
q[j][1] = j + 1;
j++;
q[j][2] = j + 3;
j++;
q[j][0] = j + 1;
j++;
q[j][2] = j + 1;
j++;


i = i + 2;
}
if(reg[i] == 'a' && reg[i + 1] == '*')
{
q[j][2] = ((j + 1) * 10) + (j + 3);
j++;
q[j][0] = j + 1;
j++;
q[j][2] = ((j + 1) * 10) + (j - 1);
j++;
}
if (reg[i] == 'b' && reg[i + 1] == '*')
{
q[j][2] = ((j + 1) * 10) + (j + 3);
j++;
q[j][1] = j + 1;
j++;
q[j][2] = ((j + 1) * 10) + (j - 1);
j++;
}
if (reg[i] == ')' && reg[i + 1] == '*')
{
q[0][2] = ((j + 1) * 10) + 1;
q[j][2] = ((j + 1) * 10) + 1;
j++;
}
i++;
}
printf("Transition function \n");
for (i = 0; i <= j; i++)
{
if (q[i][0] != 0)
printf("\n q[%d,a]-->%d", i, q[i][0]);
if (q[i][1] != 0)
printf("\n q[%d,b]-->%d", i, q[i][1]);
if (q[i][2] != 0)
{
if (q[i][2] < 10)
printf("\n q[%d,e]-->%d", i, q[i][2]);
else
printf("\n q[%d,e]-->%d & %d", i, q[i][2] / 10, q[i][2] % 10);
}
}
return 0;


}
Exp 5:
// exp 5
#include <stdio.h>
#define MAX_NODES 10
int main() {
int symbolLength, numNodes, finalState;
printf("Symbol Length: ");
scanf("%d", &symbolLength);
int inputSymbol[symbolLength];
printf("Enter the input symbol: ");
for (int i = 0; i < symbolLength; i++) {
scanf("%d", &inputSymbol[i]);
}
printf("Enter the number of nodes: ");
scanf("%d", &numNodes);
int transitionTable[MAX_NODES][MAX_NODES];
printf("Enter the transition table:\n");
for (int i = 0; i < numNodes; i++) {
for (int j = 0; j < numNodes; j++) {
scanf("%d", &transitionTable[i][j]);
}
}
printf("Enter the final state: ");
scanf("%d", &finalState);
printf("Equivalent DFA:\n\t");
for (int i = 0; i < symbolLength; i++) {
printf("%d\t", inputSymbol[i]);
}
printf("\n");
for (int i = 0; i < numNodes; i++) {
printf("(%d)\t", i);
for (int j = 0; j < symbolLength; j++) {

if (transitionTable[i][j] == finalState) {
printf("(%d)\t", finalState);
} else {
printf("(%d,%d)\t", i, transitionTable[i][j]);
}
}
printf("\n");
}
return 0;
}
First:
#include<stdio.h>
#include<ctype.h>
void FIRST(char );
int count,n=0;
char prodn[10][10], first[10];
main()
{
int i,choice;
char c,ch;
printf("How many productions ? :");
scanf("%d",&count);
printf("Enter %d productions epsilon= $ :\n\n",count);
for(i=0;i<count;i++)
scanf("%s%c",prodn[i],&ch);
do
{
n=0;
printf("Element :");
scanf("%c",&c);
FIRST(c);
printf("\n FIRST(%c)= { ",c);
for(i=0;i<n;i++)
printf("%c ",first[i]);
printf("}\n");printf("press 1 to continue : ");
scanf("%d%c",&choice,&ch);
}
while(choice==1);
}
void FIRST(char c)
{
int j;
if(!(isupper(c)))first[n++]=c;
for(j=0;j<count;j++)
{
if(prodn[j][0]==c)
{
if(prodn[j][2]=='$') first[n++]='$';
else if(islower(prodn[j][2]))first[n++]=prodn[j][2];
else FIRST(prodn[j][2]);
}
}
}
Follow:
#include<stdio.h>
#include<string.h>
int n,m=0,p,i=0,j=0;
char a[10][10],f[10];
void follow(char c);
void first(char c);
int main()
{
int i,z;
char c,ch;
printf("Enter the no.of productions:");
scanf("%d",&n);
printf("Enter the productions(epsilon=$):\n");
for(i=0;i<n;i++)
scanf("%s%c",a[i],&ch);
do
{
m=0;
printf("Enter the element whose FOLLOW is to be found:");scanf("%c",&c);
follow(c);
printf("FOLLOW(%c) = { ",c);
for(i=0;i<m;i++)
printf("%c ",f[i]);
printf(" }\n");
printf("Do you want to continue(0/1)?");
scanf("%d%c",&z,&ch);
}
while(z==1);
}
void follow(char c)
{
if(a[0][0]==c)f[m++]='$';
for(i=0;i<n;i++)
{
for(j=2;j<strlen(a[i]);j++)
{
if(a[i][j]==c)
{
if(a[i][j+1]!='\0')first(a[i][j+1]);
if(a[i][j+1]=='\0'&&c!=a[i][0])
follow(a[i][0]);
}
}
}
}
void first(char c)
{
int k;
if(!(isupper(c)))f[m++]=c;
for(k=0;k<n;k++)
{
if(a[k][0]==c)
{
if(a[k][2]=='$') follow(a[i][0]);
else if(islower(a[k][2]))f[m++]=a[k][2];
else first(a[k][2]);
}
}}
Lexx:
%{
%}
Letter [a-zA-Z0-9] +
%%
{Letter}+ printf(“%s is an identifier”,yytext);
[+] | [=] printf(“%s is an operator”,yytext);
; printf(“%s is a delimiter”,yytext);
%%
intyywrap(void)
{
return 1;
}
int main()
{
yylex();
return 0;
}
Yacc:
%{
#include "y.tab.h"
extern int yylval;
%}
%%
[0-9]+ {yylval=atoi(yytext); return NUM;}
\n return 0;
. return yytext[0];
%%
int yywrap(void)
{
return 1;
}
Calc.y%{
#include<stdio.h>
%}
%token NUM
%left '+' '-'
%%
S:E {printf("answer=%d\n",$1);}
;
E:E'+'E {$$ = $1 + $3;}
| E'-'E {$$ = $1 - $3;}
| NUM {$$ = $1;}
;
%%
#include "lex.yy.c"
int main()
{
printf("enter the expression:");
yyparse();
printf("Valid Expression");
return 0;
}
void yyerror()
{
printf("\n Error");
}
Exp 10:
#include<stdio.h>
#include<string.h>
void main()
{
int n,i;
printf("Enter Number of Lines: ");
scanf("%d",&n);
char op[n][2],arg1[n][5],arg2[n][5],result[n][5];
for(i=0;i<n;i++)scanf("%s%s%s%s",op[i],arg1[i],arg2[i],result[i]);
for(i=0;i<n;i++)
{
if(strcmp(op[i],"+")==0)
{
printf("\nMOV R0,%s",arg1[i]);
printf("\nADD R0,%s",arg2[i]);
printf("\nMOV %s,R0",result[i]);
}
if(strcmp(op[i],"*")==0)
{
printf("\nMOV R0,%s",arg1[i]);
printf("\nMUL R0,%s",arg2[i]);
printf("\nMOV %s,R0",result[i]);
}
if(strcmp(op[i],"-")==0)
{
printf("\nMOV R0,%s",arg1[i]);
printf("\nSUB R0,%s",arg2[i]);
printf("\nMOV %s,R0",result[i]);
}
if(strcmp(op[i],"/")==0)
{
printf("\nMOV R0,%s",arg1[i]);
printf("\nDIV R0,%s",arg2[i]);
printf("\nMOV %s,R0",result[i]);
}
if(strcmp(op[i],"=")==0)
{
printf("\nMOV R0,%s",arg1[i]);
printf("\nMOV %s,R0",result[i]);
}
}
}
Exp 11:
#include <stdio.h>
#include <string.h>
int main() {
int n = 5;
char left[] = {'a', 'b', 'e', 'f', 'r'};
char right[][20] = {"9", "c+d", "c+d", "b+e", "f"};// Intermediate Code
printf("Intermediate Code\n");
for (int i = 0; i < n; i++) {
printf("%c=%s\n", left[i], right[i]);
}
// Eliminate Common Expression
printf("\nEliminate Common Expression\n");
for (int i = 0; i < n; i++) {
for (int j = i + 1; j < n; j++) {
if (strcmp(right[i], right[j]) == 0) {
printf("%c=%s\n", left[j], right[j]);
strcpy(right[j], ""); // Set right[j] to an empty string
}
}
}
// Optimized Code
printf("\nOptimized Code\n");
printf("b=%s\n", right[1]);
printf("f=b+%c\n", left[1]);
printf("r=f\n");
return 0;
}
Exp 12:
exp 12
#include <stdio.h>
#include <string.h>
char prol[7][10] = { "S", "A", "A", "B", "B", "C", "C" };
char pror[7][10] = { "A", "Bb", "Cd", "aB", "@", "Cc", "@" };
char prod[7][10] = { "S->A", "A->Bb", "A->Cd", "B->aB", "B->@", "C->Cc", "C->@" };
char first[7][10] = { "abcd", "ab", "cd", "a@", "@", "c@", "@" };
char follow[7][10] = { "$", "$", "$", "a$", "b$", "c$", "d$" };
char table[5][6][10];
int numr(char c)
{
switch (c)
{
case 'S':return 0;
case 'A':
return 1;
case 'B':
return 2;
case 'C':
return 3;
case 'a':
return 0;
case 'b':
return 1;
case 'c':
return 2;
case 'd':
return 3;
case '$':
return 4;
}
return (2);
}
int main()
{
int i, j, k;
for (i = 0; i < 5; i++)
for (j = 0; j < 6; j++)
strcpy(table[i][j], " ");
printf("The following grammar is used for Parsing Table:\n");
for (i = 0; i < 7; i++)
printf("%s\n", prod[i]);
printf("\nPredictive parsing table:\n");fflush(stdin);
for (i = 0; i < 7; i++)
{
k = strlen(first[i]);
for (j = 0; j < 10; j++)
if (first[i][j] != '@')
strcpy(table[numr(prol[i][0]) + 1][numr(first[i][j]) + 1], prod[i]);
}
for (i = 0; i < 7; i++)
{
if (strlen(pror[i]) == 1)
{
if (pror[i][0] == '@')
{
k = strlen(follow[i]);
for (j = 0; j < k; j++)
strcpy(table[numr(prol[i][0]) + 1][numr(follow[i][j]) + 1], prod[i]);
}
}
}
strcpy(table[0][0], " ");
strcpy(table[0][1], "a");
strcpy(table[0][2], "b");
strcpy(table[0][3], "c");
strcpy(table[0][4], "d");
strcpy(table[0][5], "$");
strcpy(table[1][0], "S");
strcpy(table[2][0], "A");
strcpy(table[3][0], "B");
strcpy(table[4][0], "C");printf("\n--------------------------------------------------------\n");
for (i = 0; i < 5; i++)
for (j = 0; j < 6; j++)
{
printf("%-10s", table[i][j]);
if (j == 5)
printf("\n--------------------------------------------------------\n");
}
}
